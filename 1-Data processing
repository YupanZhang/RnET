import numpy as np  
import pandas as pd  
import rasterio  
import os  
import matplotlib.pyplot as plt  
import seaborn as sns  
from sklearn.model_selection import train_test_split  
from sklearn.preprocessing import StandardScaler  

plt.rcParams['font.family'] = 'Arial'  
plt.rcParams['font.sans-serif'] = ['Arial']  
plt.rcParams['axes.unicode_minus'] = False


data_path = r'D:\Rnmap\CLip\S'  


raster_files = {  
    'Ra': 'ra.tif',  
    'CEC': 'cec.tif',  
    'Clay': 'clay.tif',  
    'DTB': 'dtb.tif',  
    'OC': 'oc.tif',  
    'PH': 'ph.tif',  
    'Lithology': 'glim.tif',
    'Sand': 'sand.tif',
    'Silt': 'silt.tif'
}  

 
def read_raster(filename, data_path):  
    file_path = os.path.join(data_path, filename)  
    with rasterio.open(file_path) as f:  
        data = f.read(1)  
        nodata_value = f.nodata  
    
    
    processed_data = data.astype(float)  
    processed_data[data == nodata_value] = np.nan  
    
    return pd.Series(processed_data.flatten(), name=filename.split('.')[0].upper())  


processed_data = {name: read_raster(file, data_path)   
                  for name, file in raster_files.items()}  


df = pd.DataFrame(processed_data)  

 
df_cleaned = df.dropna()  


feature_names = [ 'CEC', 'Clay', 'DTB', 'OC', 'PH', 'Lithology', 'Sand', 'Silt', 'Ra']  


plt.figure(figsize=(16, 8))  

 
plt.subplot(1, 2, 1)  
for feature in feature_names[:-1]:  
    sns.kdeplot(df_cleaned[feature], fill=True, label=feature)  
plt.title("Feature distribution", fontsize=16)  
plt.xlabel("Feature", fontsize=14)  
plt.ylabel("Density", fontsize=14)  
plt.legend()  

 
plt.subplot(1, 2, 2)  
corr = df_cleaned.corr()  
sns.heatmap(corr,   
            cmap='coolwarm',   
            center=0,  
            annot=True,  
            fmt=".2f",   
            square=True,   
            linewidths=.5,   
            cbar_kws={"shrink": .8})  
plt.title("Feature Correlation Heatmap", fontsize=18)  
plt.tight_layout()  
plt.show()  

 
ra_correlations = corr['Ra'].sort_values(key=abs, ascending=False)  
print("\related characters:")  
print(ra_correlations)  

 
X = df_cleaned[feature_names[:-1]]  
y = df_cleaned['Ra']  

 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)  
 
scaler = StandardScaler()  
X_scaled = pd.DataFrame(  
    scaler.fit_transform(X_train),   
    columns=X_train.columns  
)  

print("xtrain:", X_train.shape)  
print("xtest:", X_test.shape)  
print("ytrain:", y_train.shape)  
print("ytest:", y_test.shape)
